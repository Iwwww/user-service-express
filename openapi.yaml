openapi: 3.1.0
info:
  title: User Service API
  version: 1.0.0
  description: REST API for user management
servers:
  - url: http://localhost:3000/v1
paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Register"
      responses:
        "201":
          description: User registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterResponse"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "409":
          description: Conflict (e.g., email already exists)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/login:
    post:
      tags: [Auth]
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Unauthorized (invalid credentials)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/refresh:
    post:
      tags: [Auth]
      summary: Refresh access token
      description: Exchanges a valid refresh token from cookie  for a new access token.
      responses:
        "200":
          description: New access token issued
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshResponse"
        "401":
          description: Unauthorized (missing or invalid refresh token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{id}:
    get:
      tags: [Users]
      summary: Get user by id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUser"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users:
    get:
      tags: [Users]
      summary: Get users array
      responses:
        "200":
          description: Users array
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUsers"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{id}/block:
    put:
      tags: [Users]
      summary: Block a user
      description: Blocks a user account, making it inactive.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: User blocked successfully (no content)
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "403":
          description: Forbidden error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags: [Users]
      summary: Unblock user
      description: Unblocks a user account, making it active.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: User unblocked successfully (no content)
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "403":
          description: Forbidden error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenError"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /health:
    get:
      summary: Check if service healthy
      responses:
        "200":
          description: Service is healthy
          content:
            text/plain:
              schema:
                type: string
                example: Service is healthy

components:
  schemas:
    GetUser:
      type: object
      required: [id, fullName, birthDate, email, role, isActive]
      properties:
        id:
          type: string
          format: uuid
        fullName:
          type: string
          minLength: 1
        birthDate:
          type: string
          format: date
          example: "2010-09-15"
        email:
          type: string
          format: email
        role:
          type: string
          enum: [user, admin]
        isActive:
          type: boolean

    GetUsers:
      type: array
      items:
        $ref: "#/components/schemas/GetUser"

    Register:
      type: object
      required: [fullName, birthDate, email, password]
      properties:
        fullName:
          type: string
          minLength: 1
        birthDate:
          type: string
          format: date
          example: "2010-09-15"
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        role:
          type: string
          enum: [user, admin]
          default: user

    RegisterResponse:
      type: object
      required: [message, data]
      properties:
        message:
          type: string
          example: User registered successfully
        data:
          type: object
          required: [user, accessToken]
          properties:
            user:
              $ref: "#/components/schemas/GetUser"
            accessToken:
              type: string
              description: JWT access token for the user
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    Login:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          minLength: 1
          example: stringst
    LoginResponse:
      type: object
      required: [message, data]
      properties:
        message:
          type: string
          example: Login successful
        data:
          type: object
          required: [user, accessToken]
          properties:
            user:
              $ref: "#/components/schemas/GetUser"
            accessToken:
              type: string
              description: JWT access token
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    RefreshResponse:
      type: object
      required: [data]
      properties:
        data:
          type: object
          required: [accessToken]
          properties:
            accessToken:
              type: string
              description: Newly issued JWT access token
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    Error:
      type: object
      required: [message]
      properties:
        message:
          type: string

    ValidationIssue:
      type: object
      required: [code, message, path]
      properties:
        code:
          type: string
        message:
          type: string
        path:
          type: array
          items:
            type: string

    ValidationError:
      type: object
      required: [message, issues]
      properties:
        message:
          type: string
          example: Validation failed
        issues:
          type: array
          items:
            $ref: "#/components/schemas/ValidationIssue"

    ForbiddenError:
      type: object
      required: [message]
      properties:
        message:
          type: string
          example: Resource access denied
