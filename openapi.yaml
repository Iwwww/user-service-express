openapi: 3.1.0
info:
  title: User Service API
  version: 1.0.0
  description: REST API for user management
servers:
  - url: http://localhost:3000/v1

paths:
  /users/{id}:
    get:
      tags: [Users]
      summary: Get user by id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUser"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users:
    get:
      tags: [Users]
      summary: Get users array
      responses:
        "200":
          description: Users array
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUsers"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags: [Users]
      summary: Create user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUser"
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUser"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "409":
          description: Conflict (e.g., email already exists)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /health:
    get:
      summary: Check if service healthy
      responses:
        "200":
          description: Service is healthy
          content:
            text/plain:
              schema:
                type: string
                example: Service is healthy

components:
  schemas:
    GetUser:
      type: object
      required: [id, fullName, birthDate, email, role, isActive]
      properties:
        id:
          type: string
          format: uuid
        fullName:
          type: string
          minLength: 1
        birthDate:
          type: string
          pattern: "^\\d{4}-\\d{2}-\\d{2}$"
        email:
          type: string
          format: email
        role:
          type: string
          enum: [user, admin]
        isActive:
          type: boolean

    GetUsers:
      type: array
      items:
        $ref: "#/components/schemas/GetUser"

    CreateUser:
      type: object
      required: [fullName, birthDate, email, password]
      properties:
        fullName:
          type: string
          minLength: 1
        birthDate:
          type: string
          pattern: "^\\d{4}-\\d{2}-\\d{2}$"
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        role:
          type: string
          enum: [user, admin]
          default: user

    Error:
      type: object
      required: [message]
      properties:
        message:
          type: string

    ValidationIssue:
      type: object
      required: [code, message, path]
      properties:
        code:
          type: string
        message:
          type: string
        path:
          type: array
          items:
            type: string

    ValidationError:
      type: object
      required: [message, issues]
      properties:
        message:
          type: string
          example: Validation failed
        issues:
          type: array
          items:
            $ref: "#/components/schemas/ValidationIssue"
